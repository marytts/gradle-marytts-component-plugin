task testPlugins {
    doLast {
        assert pluginManager.hasPlugin('de.dfki.mary.component')
        assert pluginManager.hasPlugin('groovy')
    }
}

task testExtension {
    doLast {
        assert marytts.component.name == componentName
        assert marytts.component.packageName == componentPackageName
    }
}

task testGenerateServiceLoader {
    dependsOn generateServiceLoader
    doLast {
        assert file("$buildDir/serviceLoader.txt").exists()
        assert file("$buildDir/serviceLoader.txt").text == "${componentPackageName}.${componentName}Config"
    }
}

task testUnpackSourceTemplates {
    dependsOn unpackSourceTemplates
    doLast {
        assert file("$buildDir/unpackedSrcTemplates/ConfigClass.java").exists()
    }
}

task testUnpackTestSourceTemplates {
    dependsOn unpackTestSourceTemplates
    doLast {
        assert file("$buildDir/unpackedTestSrcTemplates/ConfigTest.groovy").exists()
    }
}

task testUnpackIntegrationTestSourceTemplates {
    dependsOn unpackIntegrationTestSourceTemplates
    doLast {
        assert file("$buildDir/unpackedIntegrationTestSrcTemplates/IntegrationTest.groovy").exists()
    }
}

task testGenerateSource {
    dependsOn generateSource
    doLast {
        assert sourceSets.main.allSource.contains(file("$buildDir/generatedSrc/$componentPackagePath/${componentName}Config.java"))
    }
}

task testGenerateTestSource {
    dependsOn generateTestSource
    doLast {
        assert sourceSets.test.allSource.contains(file("$buildDir/generatedTestSrc/$componentPackagePath/${componentName}ConfigTest.groovy"))
    }
}

task testGenerateIntegrationTestSource {
    dependsOn generateIntegrationTestSource
    doLast {
        assert sourceSets.integrationTest.allSource.contains(file("$buildDir/generatedIntegrationTestSrc/$componentPackagePath/Load${componentName}IT.groovy"))
    }
}

task testGenerateConfig {
    dependsOn generateConfig
    doLast {
        assert file("$buildDir/generated.config").exists()
    }
}

task testProcessResources {
    dependsOn processResources
    doLast {
        assert fileTree(sourceSets.main.output.resourcesDir).contains(file("$buildDir/resources/main/$componentPackagePath/$configFileName"))
    }
}

task testCompileJava {
    dependsOn compileJava
    doLast {
        assert fileTree(sourceSets.main.java.classesDirectory).contains(file("$buildDir/classes/java/main/$componentPackagePath/${componentName}Config.class"))
    }
}

task testCompileTestGroovy {
    dependsOn compileTestGroovy
    doLast {
        assert fileTree(sourceSets.test.groovy.outputDir).contains(file("$buildDir/classes/groovy/test/$componentPackagePath/${componentName}ConfigTest.class"))
    }
}

task testCheck {
    dependsOn check
    doLast {
        assert fileTree(testReportDir).include('**/index.html').files.size() == 3
    }
}
