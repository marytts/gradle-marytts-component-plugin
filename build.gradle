plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.10.1'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'maven-publish'
}

group 'de.dfki.mary'
version '0.3-SNAPSHOT'
description 'Utility plugin to build MaryTTS components with Gradle'

sourceCompatibility = 1.8

gradlePlugin {
    plugins {
        componentPlugin {
            id = 'de.dfki.mary.component'
            implementationClass = 'de.dfki.mary.ComponentPlugin'
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    api group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    testImplementation group: 'org.testng', name: 'testng', version: '7.0.0'
}

test {
    useTestNG()
    failFast = true
    testLogging {
        events 'passed', 'failed', 'skipped'
        exceptionFormat = 'full'
        info {
            showStandardStreams = true
        }
    }
    finalizedBy jacocoTestReport
    jacoco {
        excludes = [
                'de.dfki.mary.ComponentPlugin',
                'de.dfki.mary.tasks.*'
        ]
    }
}

jacocoTestReport {
    dependsOn test
    reports.xml.enabled = true
}

pluginBundle {
    def url = 'https://github.com/marytts/gradle-marytts-component-plugin'
    website = url
    vcsUrl = url
    description = project.description
    tags = ['marytts', 'text-to-speech', 'tts', 'speech synthesis']

    plugins {
        componentPlugin {
            displayName = 'Gradle MaryTTS Component Plugin'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'MaryTTS Component Plugin'
                description = 'A base plugin for every component developed for MaryTTS'
                url = 'https://github.com/marytts/gradle-marytts-component-plugin'
                inceptionYear = '2017'
                organization {
                    name = 'DFKI GmbH'
                    url = 'https://dfki.de/'
                }
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0-standalone.html'
                    }
                }
                developers {
                    developer {
                        name = 'SÃ©bastien Le Maguer'
                        url = 'https://github.com/seblemaguer'
                    }
                    developer {
                        name = 'Ingmar Steiner'
                        url = 'https://github.com/psibre'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/marytts/gradle-marytts-component-plugin.git'
                    developerConnection = 'scm:git:git@github.com/marytts/gradle-marytts-component-plugin.git'
                    url = 'https://github.com/marytts/gradle-marytts-component-plugin'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/marytts/gradle-marytts-component-plugin/issues'
                }
                ciManagement {
                    system = 'Travis CI'
                    url = 'https://travis-ci.com/githubmarytts/gradle-marytts-component-plugin'
                }
                distributionManagement {
                    downloadUrl = 'https://bintray.com/marytts/gradle-marytts-component-plugin/marytts'
                }
            }
        }
    }
    repositories {
        maven {
            name 'Project'
            url "$rootProject.buildDir/repo"
        }
        maven {
            if (version.endsWith('-SNAPSHOT')) {
                name 'OJO'
                url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
            } else {
                name 'Bintray'
                url 'https://api.bintray.com/maven/marytts/marytts/gradle-marytts-component-plugin'
            }
            credentials {
                username = findProperty('bintrayUser')
                password = findProperty('bintrayApiKey')
            }
        }
    }
}
